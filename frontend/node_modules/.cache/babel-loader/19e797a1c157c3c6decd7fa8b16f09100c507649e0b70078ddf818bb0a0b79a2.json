{"ast":null,"code":"var _jsxFileName = \"/home/gkiarie/ERP/frontend/src/components/Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [staffId, setStaffId] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n  const handleLogin = () => {\n    if (!staffId || !password) {\n      setErrorMessage('Please fill out all fields.');\n      return;\n    }\n    fetch('https://erp-gbxu.onrender.com/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        staff_id: staffId,\n        password\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      if (data.access_token) {\n        localStorage.setItem('token', data.access_token);\n        localStorage.setItem('role', data.role);\n        setErrorMessage('');\n        navigate(data.role === 'admin' ? '/admin' : '/profile');\n      } else {\n        setErrorMessage('Invalid login credentials.');\n      }\n    }).catch(err => {\n      console.error(err);\n      setErrorMessage('An error occurred. Please try again.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Staff ID\",\n        value: staffId,\n        onChange: e => setStaffId(e.target.value.toUpperCase())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"z4l2ElDmnG4Y5Mr/l4yhMvMeMHo=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Login","_s","staffId","setStaffId","password","setPassword","errorMessage","setErrorMessage","navigate","handleLogin","fetch","method","headers","body","JSON","stringify","staff_id","then","response","json","data","console","log","access_token","localStorage","setItem","role","catch","err","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","toUpperCase","onClick","_c","$RefreshReg$"],"sources":["/home/gkiarie/ERP/frontend/src/components/Login.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst Login = () => {\n  const [staffId, setStaffId] = useState(''); \n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n\n  const handleLogin = () => {\n    if (!staffId || !password) {\n      setErrorMessage('Please fill out all fields.');\n      return;\n    }\n\n    fetch('https://erp-gbxu.onrender.com/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ staff_id: staffId, password }), \n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data)\n        if (data.access_token) {\n          localStorage.setItem('token', data.access_token);\n          localStorage.setItem('role', data.role);\n          setErrorMessage(''); \n          navigate(data.role === 'admin' ? '/admin' : '/profile');\n        } else {\n          setErrorMessage('Invalid login credentials.');\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        setErrorMessage('An error occurred. Please try again.');\n      });\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-form\">\n        <h1>Login</h1>\n        {errorMessage && <p className=\"error-message\">{errorMessage}</p>} \n        <input\n          type=\"text\"\n          placeholder=\"Staff ID\"\n          value={staffId}\n          onChange={(e) => setStaffId(e.target.value.toUpperCase())}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button onClick={handleLogin}>Login</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}